geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
require("ggplot2")
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
p1 <- ggplot(counts, aes(y = P),x = Insect) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P),x = Insect) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = pofygivenx$pofygivenx)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
p2 <- ggplot(counts, aes(y = P, x = reorder(Insect,P)) +
geom_bar(stat = "identity") +
coord_flip()
require("gridExtra")
grid.arrange(arrangeGrob(p1, p2))
counts <- data.frame(Insect = pofygivenx$insect,P = order(pofygivenx$pofygivenx))
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, aes(y = P,x = Insect)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts2 <- order(counts)
counts2
counts
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
counts
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
vectPofygivenx = pofygivenx$pofygivenx
insect = pofygivenx$insect
hist(vectPofygivenx)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
pofygivenx
pofygivenx$pofygivenx
p1 <- ggplot(counts, aes(x = Insect, y = P)) +
c
install.packages("devtools")
library(devtools)
install_github("plotflow", "trinker")
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
library(plotflow)
order_by
install_github("trinker/plotflow", "trinker")
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
#levels=mtcars2[order(mtcars$mpg)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.frame(P = order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
head(counts)
pofygivenx$pofygivenx
counts <- data.frame(order(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
head(counts)
pofygivenx$pofygivenx
counts <- data.frame(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
head(counts)
counts<- counts[order(P),]
counts<- counts[order(counts$P),]
head(counts)
p1 <- ggplot(counts, order_by(P, ~ mpg, dat2), aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts<- counts[order(counts$P)]
counts<- counts[order(P),]
attach(counts)
counts<- counts[order(P),]
head(counts)
counts<- counts[order(-P),]
head(counts)
p1 <- ggplot(counts, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts2<- counts[order(-P),]
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(counts)
counts2
counts <- data.frame(P= pofygivenx$pofygivenx*100,Insect = pofygivenx$insect)
attach(counts)
counts2<- counts[order(-P),]
head(counts)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
detach(counts)
counts$P <- factor(counts$P, levels = counts$P, ordered = TRUE)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts <- data.table(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
counts <- data.frame(P= pofygivenx$pofygivenx,Insect = pofygivenx$insect)
counts
head(counts)
head(counts$P)
counts$P <- factor(counts$P levels = counts$P, ordered = TRUE)
counts$P <- factor(counts$P, levels = counts$P, ordered = TRUE)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <- as.factor(counts$P, levels = counts$P, ordered = TRUE)
counts$P <- factor(counts$P)
counts <- data.frame(P= as.factor(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <-factor(counts$P, levels=counts[order(counts$P)
counts$P <-factor(counts$P, levels=counts[order(counts$P)])
counts$P <-factor(counts$P, levels=counts[order(counts$P)])
counts$P <-factor(counts$P, levels=order(counts$P))
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
counts$P <-factor(counts$P, levels=counts$P[order(counts$P)])
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(counts)
counts <- data.frame(P= as.factor(pofygivenx$pofygivenx),Insect = pofygivenx$insect)
counts$P <-factor(counts$P, levels=counts$P[order(counts$P)])
head(counts)
p1 <- ggplot(counts2, aes(x = Insect,y = P)) +
geom_bar(stat = "identity") +
coord_flip()
grid.arrange(arrangeGrob(p1))
head(data)
redlisted = subset(data,data$redlist == '1')
notredlisted = subset(data,data$redlist == '0')
x = list(unique(redlisted$insect))
# create value labels
redlist.f = ''
redlist.f <- factor(data$insect, levels= c(1:126),
labels = x)
# plot densities
sm.density.compare(data$pofygivenx, data$insect, xlab="P(x|y)", ylab="Insects",ylim=c(0, 10),xlim=c(0,1))
title(main="RedList Plants")
dev.off()
require(sm)
data.family <- dbGetQuery(connection, "select count(SpecimenUID) as count,T5.TaxName as family  FROM Specimen S1 left join MNL T1 ON S1.Genus=T1.MNLUID left join MNL T2 ON S1.Species=T2.MNLUID left join MNL T3 ON S1.Tribe=T3.MNLUID left join MNL T4 on S1.Subfamily=T4.MNLUID left join MNL T5 on T4.ParentID=T5.MNLUID left join Locality L1 on S1.Locality=L1.LocalityUID left join Flora_MNL F1 ON S1.HostG=F1.HostMNLUID left join Flora_MNL F2 ON S1.HostSp=F2.HostMNLUID left join Flora_MNL F3 ON S1.HostSSp=F3.HostMNLUID left join Flora_MNL F4 ON S1.HostF=F4.HostMNLUID left join SubDiv SD on L1.SubDivUID=SD.SubDivUID left join StateProv SP on SD.StateProvUID=SP.StateProvUID left join colevent CE on S1.ColEventUID=CE.ColEventUID left join Collector C1 on CE.Collector=C1.CollectorUID left join Country CN on SP.CountryUID=CN.UID left join HostCommonName HC on S1.HostCName=HC.CommonUID  WHERE S1.Insect_ID=1 group by T5.TaxName")
rm(list=ls())
#requirements
require(RMySQL)
require(igraph)
require(ggplot)
require(gplots)
require(vcd)
connection <- dbConnect(MySQL(), user="root", password="543#$rdS", dbname="pbi_locality", host="localhost")
dbListTables(connection)
dbListFields(connection, "host_network_genus_miridae")
data.family <- dbGetQuery(connection, "select count(SpecimenUID) as count,T5.TaxName as family  FROM Specimen S1 left join MNL T1 ON S1.Genus=T1.MNLUID left join MNL T2 ON S1.Species=T2.MNLUID left join MNL T3 ON S1.Tribe=T3.MNLUID left join MNL T4 on S1.Subfamily=T4.MNLUID left join MNL T5 on T4.ParentID=T5.MNLUID left join Locality L1 on S1.Locality=L1.LocalityUID left join Flora_MNL F1 ON S1.HostG=F1.HostMNLUID left join Flora_MNL F2 ON S1.HostSp=F2.HostMNLUID left join Flora_MNL F3 ON S1.HostSSp=F3.HostMNLUID left join Flora_MNL F4 ON S1.HostF=F4.HostMNLUID left join SubDiv SD on L1.SubDivUID=SD.SubDivUID left join StateProv SP on SD.StateProvUID=SP.StateProvUID left join colevent CE on S1.ColEventUID=CE.ColEventUID left join Collector C1 on CE.Collector=C1.CollectorUID left join Country CN on SP.CountryUID=CN.UID left join HostCommonName HC on S1.HostCName=HC.CommonUID  WHERE S1.Insect_ID=1 group by T5.TaxName")
slices <- c(data.family$count)
greaters <- subset(data$count, slices > 100000)
greaters <- subset(data.family$count, slices > 100000)
lbls <- paste(subset(data$InstName, slices > 10000),'\n',subset(slices, slices > 10000))
lbls <- paste(subset(data.family$family, slices > 100000),'\n',subset(slices, slices > 100000))
pie(greaters, labels = lbls, col = rainbow(24), main="")
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, col = rainbow(24), main="")
pie(greaters, labels = lbls, main="")
pie(greaters, labels = lbls, clockwise = TRUE)
pie(greaters, labels = lbls, clockwise = FALSE)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 180)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 90)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 0)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 15)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 330)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 360)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 60)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 90)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 1800)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 180)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 300)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 250)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 240)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 220)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = FALSE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(slices, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(slices, clockwise = TRUE, init.angle = 200)
pie(slices)
pie(greaters, labels = lbls, clockwise = TRUE, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5")
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices
slices <- sort(c(data.family$count))
greaters <- subset(data.family$count, slices > 10000)
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 10000)
greaters
greaters <- sort(greaters)
greaters
greaters <- order(greaters)
greaters
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5")
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 10000)
lbls <- paste(subset(data.family$family, slices > 10000),'\n',subset(slices, slices > 10000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 15000)
lbls <- paste(subset(data.family$family, slices > 15000),'\n',subset(slices, slices > 15000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 20000)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters
sort(greaters)
slices <- c(data.family$count)
slices
slices <- sort(slices)
greaters <- subset(data.family$count, slices > 20000)
all <- sort(greaters)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
slices <- c(data.family$count)
greaters <- subset(data.family$count, slices > 20000)
all <- sort(greaters)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 100)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
all <- sort(greaters)
pie(all,clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 10)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(all,clockwise = TRUE, col=colours, init.angle = 180)
pie(all,clockwise = TRUE, col=colours, init.angle = 220)
pie(all,clockwise = TRUE, col=colours, init.angle = 300)
pie(all,clockwise = TRUE, col=colours, init.angle = 310)
pie(all,clockwise = TRUE, col=colours, init.angle = 350)
pie(all,clockwise = TRUE, col=colours, init.angle = 310)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(greaters, labels = lbls, clockwise = FALSE, col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = FALSE, col=colours
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
E
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
pie(all,clockwise = TRUE, col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 200)
pie(all,col=colours, init.angle = 300)
pie(all,col=colours, init.angle = 10)
pie(all,col=colours, init.angle = 330)
pie(all,col=colours, init.angle = 100)
pie(all,col=colours, init.angle = 90)
pie(all,col=colours, init.angle = 120)
pie(all,col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 20000)
lbls <- paste(subset(data.family$family, slices > 20000),'\n',subset(slices, slices > 20000))
pie(all,col=colours, init.angle = 200)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 100)
pie(all,col=colours, init.angle = 200)
greaters <- subset(data.family$count, slices > 1)
pie(greaters, labels = lbls, clockwise = TRUE, col=colours, init.angle = 200)
all <- sort(greaters)
pie(all,col=colours, init.angle = 200)
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#7cede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#ccede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5")
pie(all,col=colours, init.angle = 200)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5", "#fbffb3",)
colours=c("#8dd3c7", "#ffffb3", "#bebada", "#80b1d3", "#fb8072", "#fdb462", "#b3de69", "#d9d9d9", "#fccde5", "#fcede5", "#cbede5", "#fbffb3")
pie(all,col=colours, init.angle = 200)
tables <- dbListTables(connection)
Number of georeferenced records:
#connect satement for mysql
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
library("RMySQL")
#connect satement for mysql
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
tables <- dbListTables(connection)
tables
library("RMySQL")
library("DBI")
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
#mysqlConnect-function.R
#connect satement for mysql
library("RMySQL")
library("DBI")
connection <- dbConnect(MySQL(),user="root",password="543#$rdS",dbname="pbi_locality",host="localhost")
total <- dbGetQuery(connection, "Select count(*) from Locality")
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages(c("rmarkdown", "RMySQL"))
install.packages("RMySQL")
install.packages("rmarkdown")
devtools::install_github("rstudio/rmarkdown")
??dbfetch
install.packages("base64")
install.packages("RMySQL")
r version
r -version
version
packages
rMysql -v
sessionInfo()
library("RMySQL")
sessionInfo()
library("base")
library("RMySQL")
sessionInfo()
install.packages(c("abind", "boot", "car", "codetools", "colorspace", "data.table", "devtools", "digest", "evaluate", "FactoMineR", "formatR", "Formula", "geosphere", "ggplot2", "highr", "Hmisc", "httr", "jsonlite", "knitr", "lattice", "manipulate", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "plyr", "psych", "Rcmdr", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "rgdal", "roxygen2", "rstudioapi", "sandwich", "sp", "stringr", "swirl", "zoo"))
r version
version
help(summary)
install.packages("enaR")
install.packages("EcoNet")
show packages
install.packages("manipulate")
installed.packages
installed.packages(vegan)
installed.packages("vegan")
install.packages("vegan")
library('vegan')
library('enaR')
plot(samps$long,samps$lat)
attach(samps)
setwd("~/Desktop/Dropbox/area_of_endemismProject/code/endemismCodeKatja/mapping")
samps<- read.table("stateCheck.txt", header = FALSE, sep = "\t" ,fill = TRUE, stringsAsFactors = FALSE)
attach(samps)
plot(samps$long,samps$lat)
plot(samps$long,samps$lat)
head(samps$lat)
head(samps)
colnames(samps) <- c("insect", "state", "long", "lat")
attach(samps)
plot(samps$long,samps$lat)
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file='x',height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
library(maps)
library(mapdata)
setwd("~/Desktop/Dropbox/area_of_endemismProject/code/endemismCodeKatja/mapping")
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file='x',height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file='x'.pdf',height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file=x'.pdf',height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file=x,height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file=paste(x,'.pdf'),height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
for (x in unique(samps$state)) {
samps.subset <- subset(samps, state == x)
pdf(file=paste(x,'.pdf',sep=""),height=10, width=10)
map("worldHires","Canada", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE)
map("worldHires","Mexico", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("worldHires","usa", col="gray90", xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE,add=TRUE)
map("state", col="gray95", boundary = False, xlim = range(samps$lon), ylim = range(samps$lat),fill=TRUE, add=TRUE)
box()
c = sample(colors(), 1) #random color
points(samps.subset$lon, samps.subset$lat, pch=19, col=c
, cex=.3)
dev.off()
}
